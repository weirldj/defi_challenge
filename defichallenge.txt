1. Gas is the unit that measures the computational power applied by the miner to execute different elements of the smart contract on the 
network. Gas usage is calculated by 2 parameters namely gas limit and gas price, gas limit refers to the maximum gas the contract deployer
is willing to pay and gas price refers to the amount of gwei or wei the network is charging per gas. Transaction fee: Gas price * Gas limit

The gas usage per operation is defined in ethereum's yellow paper/

2. Storage: The most expensive aspect of any blockchain network. The data written here is permanent. All the data that you wish to store is 
stored on-chain and can be read directly from the network.

Memory: This is not a permanent data storage solution, memory holds the data only as long as the function is executing. It is then deleted.

Stack: Stack holds the variables required for almost immediate processing. The cost is usually lower as compared to memory based operations.

3. Modifiers: In most cases there are certain checks that need to be placed to ensure no unauthorized person can access critical functions 
of the smart contract. These checks can become repetitive at times for example checking if the caller is the person who deployed the contract.
These checks can then be placed in a modifier and be used across the smart contract with a single keyword placed in the function declaration.

Example: -

modifier onlyOwner(){
	require(msg.sender == owner);
	_;
}

4. Interfaces are abstract contracts that contain only function declarations but not implementations. They are used to tackle one of the biggest
problems with smart contracts - upgradeability. The functions declared in the interface need to be of the type external.

Example: -

interface Interf {
  xyz();
}

contract defi_challenge {
  Interf i;

  defi_challenge(address _addr) {
    i = Interf(_addr);
  }

  abc() {
    i.xyz();
  }

  upgrade(address _newAddr) {
    i = _newAddr;
  }
}

5. A proxy contract in an upgradeable smart contract environment is responsible for delegating tasks and upgrading to a better implementation
once an upgraded contract is deployed on chain.

6. pragma solidity ^0.5.0;
	import './interfaces/IToken.sol';
	import './ERC20.sol';
	contract Token is ERC20, IToken {

		address public owner;
		string public name;
		string public symbol;
		uint8 public decimals;
		bool public initialized = false;
		
		function initialize(
		address _owner,
		string calldata _name,
		string calldata _symbol,
		uint8 _decimals
		) external {
			require(initialized == false);
			owner = _owner;
			name = _name;
			symbol = _symbol;
			decimals = _decimals;
			initialized = true;
		}
		
		function setOwner(address _owner) external {
			owner = _owner;
		}
		
		function mint(address recipient, uint amount) external {
			_mint(recipient, amount);
		}
		
		function burn(address recipient, uint amount) external {
			_burn(recipient, amount);
		}
	}
